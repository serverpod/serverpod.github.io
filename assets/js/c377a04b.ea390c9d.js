"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[971],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||a;return r?n.createElement(g,i(i({ref:t},d),{},{components:r})):n.createElement(g,i({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1269:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={sidebar_position:1},l="Get started",p={unversionedId:"index",id:"index",title:"Get started",description:"Serverpod is an open-source, scalable app server, written in Dart for the Flutter community. Serverpod automatically generates your protocol and client-side code by analyzing your server. Calling a remote endpoint is as easy as making a local method call.",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/",editUrl:"https://github.com/serverpod/serverpod_docs/tree/main/docs/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Working with endpoints",permalink:"/concepts/working-with-endpoints"}},d={},c=[{value:"Installing Serverpod",id:"installing-serverpod",level:2},{value:"Creating your first project",id:"creating-your-first-project",level:2},{value:"Starting Postgres and Redis",id:"starting-postgres-and-redis",level:3},{value:"Start the server",id:"start-the-server",level:3}],u={toc:c};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"get-started"},"Get started"),(0,a.kt)("p",null,"Serverpod is an open-source, scalable app server, written in Dart for the Flutter community. Serverpod automatically generates your protocol and client-side code by analyzing your server. Calling a remote endpoint is as easy as making a local method call."),(0,a.kt)("h2",{id:"installing-serverpod"},"Installing Serverpod"),(0,a.kt)("p",null,"Serverpod is tested on Mac and Linux (Mac recommended), support for Windows is in the works. Before you can install Serverpod, you need to the following tools installed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Flutter")," and ",(0,a.kt)("strong",{parentName:"li"},"Dart"),". You will need Flutter version 2.10 or later. ",(0,a.kt)("a",{parentName:"li",href:"https://flutter.dev/docs/get-started/install"},"https://flutter.dev/docs/get-started/install")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Docker"),". Docker is used to manage Postgres and Redis. ",(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/desktop/mac/install/"},"https://docs.docker.com/desktop/mac/install/"))),(0,a.kt)("p",null,"Once you have Flutter and Docker installed and configured, open up a terminal and install Serverpod by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dart pub global activate serverpod_cli\n")),(0,a.kt)("p",null,"Now test the install by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"serverpod\n")),(0,a.kt)("p",null,"If everything is correctly configured, the help for the serverpod command is now displayed."),(0,a.kt)("h2",{id:"creating-your-first-project"},"Creating your first project"),(0,a.kt)("p",null,"To get your local server up and running, you need to create a new Serverpod project. Make sure that Docker Desktop is running, then create a new project by running ",(0,a.kt)("inlineCode",{parentName:"p"},"serverpod create"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"serverpod create mypod\n")),(0,a.kt)("p",null,"This command will create a new directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"mypod"),", with three dart packages inside; ",(0,a.kt)("inlineCode",{parentName:"p"},"mypod_server"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mypod_client"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"mypod_flutter"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mypod_server"),": This package contains your server-side code. Modify it to add new endpoints or other features your server needs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mypod_client"),": This is the code needed to communicate with the server. Typically, all code in this package is generated automatically, and you should not edit the files in this package."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mypod_flutter"),": This is the Flutter app, pre-configured to connect to your local server.")),(0,a.kt)("h3",{id:"starting-postgres-and-redis"},"Starting Postgres and Redis"),(0,a.kt)("p",null,"The Serverpod server needs access to a Postgres database and Redis to run. When running ",(0,a.kt)("inlineCode",{parentName:"p"},"serverpod create")," the database was configured with a default set of tables. To start Postgres and Redis ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"mypod_server"),", then run."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up -d --build\n")),(0,a.kt)("p",null,"This will build and start a set of Docker containers and give access to Postgres and Redis. If you need to stop the containers at some point, just run ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose stop"),"."),(0,a.kt)("h3",{id:"start-the-server"},"Start the server"),(0,a.kt)("p",null,"Now you should be all set to run your server. Start it by changing into the ",(0,a.kt)("inlineCode",{parentName:"p"},"mypod_server")," directory and type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dart bin/main.dart\n")),(0,a.kt)("p",null,"If everything is working you should see something like this on your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Mode: development\nConfig loaded from: config/development.yaml\napi port: 8080\nservice port: 8081\npostgres host: localhost\npostgres port: 8090\npostgres name: serverpod_test\npostgres user: postgres\npostgres pass: ********\nredis host: localhost\nredis port: 8091\nredis pass: ********\nInsights listening on port 8081\nServer id 0 listening on port 8080\n")))}m.isMDXComponent=!0}}]);