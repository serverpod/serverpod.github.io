"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[1390],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),u=s,h=p["".concat(l,".").concat(u)]||p[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9070:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return m}});var a=n(7462),s=n(3366),r=(n(7294),n(3905)),o=["components"],i={},l="Streams and messaging",c={unversionedId:"concepts/streams",id:"concepts/streams",title:"Streams and messaging",description:"For some applications, it's not enough to be able to call server-side methods. You may also want to push data from the server to the client or send data two-way. Examples include real-time games or chat applications. Luckily, Serverpod supports a framework for streaming data. It's possible to stream any serialized objects to or from any endpoint.",source:"@site/docs/03-concepts/09-streams.md",sourceDirName:"03-concepts",slug:"/concepts/streams",permalink:"/next/concepts/streams",editUrl:"https://github.com/serverpod/serverpod_docs/tree/main/docs/03-concepts/09-streams.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uploading files",permalink:"/next/concepts/file-uploads"},next:{title:"Deploying to AWS",permalink:"/next/deployments/deploying-to-aws"}},d={},m=[{value:"Handling streams server-side",id:"handling-streams-server-side",level:2},{value:"The user object",id:"the-user-object",level:3},{value:"Internal server messaging",id:"internal-server-messaging",level:3},{value:"Handling streams in your app",id:"handling-streams-in-your-app",level:2}],p={toc:m};function u(e){var t=e.components,n=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"streams-and-messaging"},"Streams and messaging"),(0,r.kt)("p",null,"For some applications, it's not enough to be able to call server-side methods. You may also want to push data from the server to the client or send data two-way. Examples include real-time games or chat applications. Luckily, Serverpod supports a framework for streaming data. It's possible to stream any serialized objects to or from any endpoint."),(0,r.kt)("h2",{id:"handling-streams-server-side"},"Handling streams server-side"),(0,r.kt)("p",null,"The Endpoint class has three methods you override to work with streams."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"streamOpened")," is called when a user connects to a stream on the Endpoint."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"streamClosed")," is called when a user disconnects from a stream on the Endpoint."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"handleStreamMessage")," is called when a serialized message is received from a client.")),(0,r.kt)("p",null,"To send a message to a client, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"sendStreamMessage")," method. You will need to include the session associated with the user."),(0,r.kt)("h3",{id:"the-user-object"},"The user object"),(0,r.kt)("p",null,"It's often handy to associate a state together with a streaming session. Typically, you do this when a stream is opened."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n")),(0,r.kt)("p",null,"You can access the user object at any time by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"getUserObject")," method. The user object is automatically discarded when a session ends."),(0,r.kt)("h3",{id:"internal-server-messaging"},"Internal server messaging"),(0,r.kt)("p",null,"A typical scenario when working with streams is to pass on messages from one user to another. For instance, if one client sends a chat message to the server, the server should send it to the correct user. Serverpod comes with a built-in messaging system that makes this easy. You can choose to pass messages locally on a single server, but messages are passed through Redis by default. Passing the messages through Redis makes it possible to send the messages between multiple servers in a cluster."),(0,r.kt)("p",null,"In most cases, it's easiest to subscribe to a message channel in the streamOpened method. The subscription will automatically be disposed of when the stream is closed. The following example will forward any message sent to a user identified by its user id."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n")),(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},"handleStreamMessage")," method, you can pass on messages to the correct channel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"For a complete real-world example, check out the server for the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/serverpod/serverpod/blob/main/modules/serverpod_chat/serverpod_chat_server/lib/src/endpoints/chat_endpoint.dart"},"chat module"),"."))),(0,r.kt)("h2",{id:"handling-streams-in-your-app"},"Handling streams in your app"),(0,r.kt)("p",null,"Before you can access streams in your client, you need to connect to the server's web socket. You do this by calling connectWebSocket on your client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"await client.connectWebSocket();\n\n")),(0,r.kt)("p",null,"You can monitor the state of the connection by adding a listener to the client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"controller.addConnectionStatusListener(_chatConnectionStatusChanged);\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/serverpod/serverpod/blob/main/packages/serverpod/example/example_flutter/lib/main.dart"},"Serverpod example")," shows how you can manage your socket connection."))),(0,r.kt)("p",null,"Once you have connected to your server's web socket, you can start passing and receiving serialized objects."),(0,r.kt)("p",null,"To receive updates from an endpoint on the server, just listen to its web socket stream."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"await for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n")),(0,r.kt)("p",null,"You send messages to the server's endpoint by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"sendStreamMessage"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"client.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Authentication is handled automatically. If you have signed in, your web socket connection will be authenticated."))))}u.isMDXComponent=!0}}]);