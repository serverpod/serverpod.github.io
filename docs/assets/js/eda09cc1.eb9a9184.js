"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[94363],{24043:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"concepts/experimental","title":"Experimental features","description":"Be cautious when using experimental features in production environments, as their stability is uncertain and they may receive breaking changes in upcoming releases.","source":"@site/versioned_docs/version-2.5.0/06-concepts/20-experimental.md","sourceDirName":"06-concepts","slug":"/concepts/experimental","permalink":"/2.5.0/concepts/experimental","draft":false,"unlisted":false,"editUrl":"https://github.com/serverpod/serverpod_docs/tree/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md","tags":[],"version":"2.5.0","sidebarPosition":20,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Best practises","permalink":"/2.5.0/concepts/testing/best-practises"},"next":{"title":"Security Configuration","permalink":"/2.5.0/concepts/security-configuration"}}');var i=s(74848),r=s(28453);const a={},l="Experimental features",o={},d=[{value:"Experimental internal APIs",id:"experimental-internal-apis",level:2},{value:"Command-line enabled features",id:"command-line-enabled-features",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Extending a Class",id:"extending-a-class",level:3},{value:"Sealed Classes",id:"sealed-classes",level:3},{value:"Exception monitoring",id:"exception-monitoring",level:2},{value:"Setup",id:"setup",level:3},{value:"Submitting diagnostic events",id:"submitting-diagnostic-events",level:3},{value:"Guidelines for handlers",id:"guidelines-for-handlers",level:3},{value:"Test support",id:"test-support",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"experimental-features",children:"Experimental features"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Be cautious when using experimental features in production environments, as their stability is uncertain and they may receive breaking changes in upcoming releases."})}),"\n",(0,i.jsx)(n.p,{children:'"Experimental Features" are cutting-edge additions to Serverpod that are currently under development or testing or whose API is not yet stable.\nThese features allow developers to explore new functionalities and provide feedback, helping shape the future of Serverpod.\nHowever, they may not be fully stable or complete and are subject to change.'}),"\n",(0,i.jsx)(n.p,{children:"Experimental features are disabled by default, i.e. they are not active unless the developer opts-in."}),"\n",(0,i.jsx)(n.h2,{id:"experimental-internal-apis",children:"Experimental internal APIs"}),"\n",(0,i.jsxs)(n.p,{children:["Experimental internal APIs are placed under the ",(0,i.jsx)(n.code,{children:"experimental"})," sub-API of the ",(0,i.jsx)(n.code,{children:"Serverpod"})," class.\nWhen an experimental feature matures it is moved from ",(0,i.jsx)(n.code,{children:"experimental"})," to ",(0,i.jsx)(n.code,{children:"Serverpod"})," proper.\nIf possible, the experimental API will remain for some time as ",(0,i.jsx)(n.code,{children:"@deprecated"}),", and then removed."]}),"\n",(0,i.jsx)(n.h2,{id:"command-line-enabled-features",children:"Command-line enabled features"}),"\n",(0,i.jsxs)(n.p,{children:["Some of the experimental features are enabled by including the ",(0,i.jsx)(n.code,{children:"--experimental-features"})," flag when running the serverpod command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ serverpod generate --experimental-features=all\n"})}),"\n",(0,i.jsx)(n.p,{children:"The current options you can pass are:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Feature"})}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"all"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Enables all available experimental features."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"inheritance"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["Allows using the ",(0,i.jsx)(n.code,{children:"extends"})," keyword in your model files to create class hierarchies."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Adding a new subtype to a class hierarchy may introduce breaking changes for older clients. Ensure client compatibility when expanding class hierarchies to avoid deserialization issues."})}),"\n",(0,i.jsx)(n.p,{children:"Inheritance allows you to define class hierarchies in your model files by sharing fields between parent and child classes, simplifying class structures and promoting consistency by avoiding duplicate field definitions."}),"\n",(0,i.jsx)(n.h3,{id:"extending-a-class",children:"Extending a Class"}),"\n",(0,i.jsxs)(n.p,{children:["To inherit from a class, use the ",(0,i.jsx)(n.code,{children:"extends"})," keyword in your model files, as shown below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"class: ParentClass\nfields:\n    name: String\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"class: ChildClass\nextends: ParentClass\nfields:\n    int: age\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will generate a class with both ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"age"})," field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class ChildClass extends ParentClass {\n    String name\n    int age\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sealed-classes",children:"Sealed Classes"}),"\n",(0,i.jsxs)(n.p,{children:["In addition to the ",(0,i.jsx)(n.code,{children:"extends"})," keyword, you can also use the ",(0,i.jsx)(n.code,{children:"sealed"})," keyword to create sealed class hierarchies, enabling exhaustive type checking. With sealed classes, the compiler knows all subclasses, ensuring that every possible case is handled when working with the model."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"class: ParentClass\nsealed: true\nfields:\n    name: String\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"class: ChildClass\nextends: ParentClass\nfields:\n    age: int\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will generate the following classes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"sealed class ParentClass {\n    String name;\n}\n\nclass ChildClass extends ParentClass {\n    String name;\n    int age;\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"All files in a sealed hierarchy need to be located in the same directory."})}),"\n",(0,i.jsx)(n.h2,{id:"exception-monitoring",children:"Exception monitoring"}),"\n",(0,i.jsx)(n.p,{children:"Serverpod allows you to monitor exceptions in a central and flexible way by using the new diagnostic event handlers.\nThese work both for exceptions thrown in application code and from the framework (e.g. server startup or shutdown errors)."}),"\n",(0,i.jsxs)(n.p,{children:["This can be used to get all exceptions reported in realtime to services for monitoring and diagnostics,\nsuch as ",(0,i.jsx)(n.a,{href:"https://sentry.io/",children:"Sentry"}),", ",(0,i.jsx)(n.a,{href:"https://www.highlight.io/",children:"Highlight"}),", and ",(0,i.jsx)(n.a,{href:"https://www.datadoghq.com/",children:"Datadog"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"It is easy to implement handlers and define custom filters within them.\nAny number of handlers can be added.\nThey are run asynchronously and should not affect the behavior or response times of the server."}),"\n",(0,i.jsx)(n.p,{children:"These event handlers are for diagnostics only,\nthey do not allow any behavior-changing action such as suppressing exceptions or converting them to another exception type."}),"\n",(0,i.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,i.jsxs)(n.p,{children:["This feature is enabled by providing one ore more ",(0,i.jsx)(n.code,{children:"DiagnosticEventHandler"})," implementations\nto the Serverpod constructor's ",(0,i.jsx)(n.code,{children:"experimentalFeatures"})," specification."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"  var serverpod = Serverpod(\n    ...\n    experimentalFeatures: ExperimentalFeatures(\n      diagnosticEventHandlers: [\n        AsEventHandler((event, {required space, required context}) {\n          print('$event  Origin is $space\\n  Context is ${context.toJson()}');\n        }),\n      ],\n    ),\n  );\n"})}),"\n",(0,i.jsx)(n.h3,{id:"submitting-diagnostic-events",children:"Submitting diagnostic events"}),"\n",(0,i.jsxs)(n.p,{children:["The API for submitting diagnostic events from user code, e.g. from endpoint methods, web calls, and future calls,\nis the new method ",(0,i.jsx)(n.code,{children:"submitDiagnosticEvent"})," under the ",(0,i.jsx)(n.code,{children:"experimental"})," member of the Serverpod class."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"  void submitDiagnosticEvent(\n    DiagnosticEvent event, {\n    required Session session,\n  })\n"})}),"\n",(0,i.jsx)(n.p,{children:"Usage example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class DiagnosticEventTestEndpoint extends Endpoint {\n  Future<String> submitExceptionEvent(Session session) async {\n    try {\n      throw Exception('An exception is thrown');\n    } catch (e, stackTrace) {\n      session.serverpod.experimental.submitDiagnosticEvent(\n        ExceptionEvent(e, stackTrace),\n        session: session,\n      );\n    }\n    return 'success';\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"guidelines-for-handlers",children:"Guidelines for handlers"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"DiagnosticEvent"})," represents an event that occurs in the server.\n",(0,i.jsx)(n.code,{children:"DiagnosticEventHandler"})," implementations can react to these events\nin order to gain insights into the behavior of the server."]}),"\n",(0,i.jsx)(n.p,{children:"As the name suggests the handlers should perform diagnostics only,\nand not have any responsibilities that the regular functioning\nof the server depends on."}),"\n",(0,i.jsx)(n.p,{children:"The registered handlers are typically run concurrently,\ncan not depend on each other, and asynchronously -\nthey are not awaited by the operation they are triggered from."}),"\n",(0,i.jsx)(n.p,{children:"If a handler throws an exception it will be logged to stderr\nand otherwise ignored."}),"\n",(0,i.jsx)(n.h3,{id:"test-support",children:"Test support"}),"\n",(0,i.jsxs)(n.p,{children:["This feature also includes support via the Serverpod test framework.\nThis means that the ",(0,i.jsx)(n.code,{children:"withServerpod"})," construct can be used together with diagnostic event handlers to test that the events are submitted and propagated as intended."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void main() {\n  var exceptionHandler = TestExceptionHandler();\n\n  withServerpod('Given withServerpod with a diagnostic event handler',\n      experimentalFeatures: ExperimentalFeatures(\n        diagnosticEventHandlers: [exceptionHandler],\n      ), (sessionBuilder, endpoints) {\n    test(\n        'when calling an endpoint method that submits an exception event '\n        'then the diagnostic event handler gets called', () async {\n      final result = await endpoints.diagnosticEventTest\n          .submitExceptionEvent(sessionBuilder);\n      expect(result, 'success');\n\n      final record = await exceptionHandler.events.first.timeout(Duration(seconds: 1));\n      expect(record.event.exception, isA<Exception>());\n      expect(record.space, equals(OriginSpace.application));\n      expect(record.context, isA<DiagnosticEventContext>());\n      expect(\n          record.context.toJson(),\n          allOf([\n            containsPair('serverId', 'default'),\n            containsPair('serverRunMode', 'test'),\n            containsPair('serverName', 'Server default'),\n          ]));\n    });\n  });\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);