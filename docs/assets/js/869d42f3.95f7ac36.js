"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[12583],{16088:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(85893),a=t(11151);const i={},r="Advanced examples",o={id:"concepts/testing/advanced-examples",title:"Advanced examples",description:"Run unit and integration tests separately",source:"@site/docs/06-concepts/18-testing/03-advanced-examples.md",sourceDirName:"06-concepts/18-testing",slug:"/concepts/testing/advanced-examples",permalink:"/next/concepts/testing/advanced-examples",draft:!1,unlisted:!1,editUrl:"https://github.com/serverpod/serverpod_docs/tree/main/docs/06-concepts/18-testing/03-advanced-examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The basics",permalink:"/next/concepts/testing/the-basics"},next:{title:"Best practises",permalink:"/next/concepts/testing/best-practises"}},d={},c=[{value:"Run unit and integration tests separately",id:"run-unit-and-integration-tests-separately",level:2},{value:"Test business logic that depends on <code>Session</code>",id:"test-business-logic-that-depends-on-session",level:2},{value:"Multiple users interacting with a shared stream",id:"multiple-users-interacting-with-a-shared-stream",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"advanced-examples",children:"Advanced examples"})}),"\n",(0,s.jsx)(n.h2,{id:"run-unit-and-integration-tests-separately",children:"Run unit and integration tests separately"}),"\n",(0,s.jsxs)(n.p,{children:["To run unit and integration tests separately, the ",(0,s.jsx)(n.code,{children:'"integration"'})," tag can be used as a filter. See the following examples:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# All tests (unit and integration)\ndart test\n\n# Only integration tests: add --tags (-t) flag\ndart test -t integration\n\n# Only unit tests: add --exclude-tags (-x) flag\ndart test -x integration\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To change the name of this tag, see the ",(0,s.jsx)(n.a,{href:"the-basics#test-group-tags-override-configuration",children:(0,s.jsx)(n.code,{children:"testGroupTagsOverride"})})," configuration option."]}),"\n",(0,s.jsxs)(n.h2,{id:"test-business-logic-that-depends-on-session",children:["Test business logic that depends on ",(0,s.jsx)(n.code,{children:"Session"})]}),"\n",(0,s.jsxs)(n.p,{children:["It is common to break out business logic into modules and keep it separate from the endpoints. If such a module depends on a ",(0,s.jsx)(n.code,{children:"Session"})," object (e.g to interact with the database), then the ",(0,s.jsx)(n.code,{children:"withServerpod"})," helper can still be used and the second ",(0,s.jsx)(n.code,{children:"endpoint"})," argument can simply be ignored:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"withServerpod('Given decreasing product quantity when quantity is zero', (\n  sessionBuilder,\n  _,\n) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, [\n      Product(\n        id: 123,\n        name: 'Apple',\n        quantity: 0,\n      ),\n    ]);\n  });\n\n  test('then should throw `InvalidOperationException`',\n      () async {\n    var future = ProductsBusinessLogic.updateQuantity(\n      session,\n      id: 123,\n      decrease: 1,\n    );\n\n    await expectLater(future, throwsA(isA<InvalidOperationException>()));\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"multiple-users-interacting-with-a-shared-stream",children:"Multiple users interacting with a shared stream"}),"\n",(0,s.jsx)(n.p,{children:"For cases where there are multiple users reading from or writing to a stream, such as real-time communication, it can be helpful to validate this behavior in tests."}),"\n",(0,s.jsx)(n.p,{children:"Given the following simplified endpoint:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class CommunicationExampleEndpoint {\n  static const sharedStreamName = 'shared-stream';\n  Future<void> postNumberToSharedStream(Session session, int number) async {\n    await session.messages\n        .postMessage(sharedStreamName, SimpleData(num: number));\n  }\n\n  Stream<int> listenForNumbersOnSharedStream(Session session) async* {\n    var sharedStream =\n        session.messages.createStream<SimpleData>(sharedStreamName);\n\n    await for (var message in sharedStream) {\n      yield message.num;\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then a test to verify this behavior can be written as below. Note the call to the ",(0,s.jsx)(n.code,{children:"flushEventQueue"})," helper (exported by the test tools), which ensures that ",(0,s.jsx)(n.code,{children:"listenForNumbersOnSharedStream"})," executes up to its first ",(0,s.jsx)(n.code,{children:"yield"})," statement before continuing with the test. This guarantees that the stream was registered by Serverpod before messages are posted to it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"withServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {\n  const int userId1 = 1;\n  const int userId2 = 2;\n\n  test(\n      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '\n      'with different sessions then number should be echoed',\n      () async {\n    var userSession1 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId1,\n        {},\n      ),\n    );\n    var userSession2 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId2,\n        {},\n      ),\n    );\n\n    var stream =\n        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);\n    // Wait for `listenForNumbersOnSharedStream` to execute up to its \n    // `yield` statement before continuing\n    await flushEventQueue(); \n\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);\n\n    await expectLater(stream.take(2), emitsInOrder([111, 222]));\n  });\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var s=t(67294);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);