"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[3552],{18921:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"concepts/server-events","title":"Server events","description":"Serverpod framework comes with a built-in event messaging system. This enables efficient message exchange within and across servers, making it ideal for scenarios where shared state is needed, such as coordinating streams or managing data across a server cluster.","source":"@site/versioned_docs/version-2.5.0/06-concepts/16-server-events.md","sourceDirName":"06-concepts","slug":"/concepts/server-events","permalink":"/concepts/server-events","draft":false,"unlisted":false,"editUrl":"https://github.com/serverpod/serverpod_docs/tree/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md","tags":[],"version":"2.5.0","sidebarPosition":16,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Streams","permalink":"/concepts/streams"},"next":{"title":"Backward compatibility","permalink":"/concepts/backward-compatibility"}}');var t=n(74848),r=n(28453);const i={},d="Server events",c={},l=[{value:"Quick Reference",id:"quick-reference",level:2},{value:"Sending messages",id:"sending-messages",level:2},{value:"Global messages",id:"global-messages",level:3},{value:"Receiving messages",id:"receiving-messages",level:2},{value:"Creating a stream",id:"creating-a-stream",level:3},{value:"Stream lifecycle",id:"stream-lifecycle",level:4},{value:"Adding a listener",id:"adding-a-listener",level:3},{value:"Listener lifecycle",id:"listener-lifecycle",level:4},{value:"Revoke authentication",id:"revoke-authentication",level:2}];function o(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"server-events",children:"Server events"})}),"\n",(0,t.jsx)(s.p,{children:"Serverpod framework comes with a built-in event messaging system. This enables efficient message exchange within and across servers, making it ideal for scenarios where shared state is needed, such as coordinating streams or managing data across a server cluster."}),"\n",(0,t.jsxs)(s.p,{children:["The event message system is accessed on the ",(0,t.jsx)(s.code,{children:"Session"})," object through the field ",(0,t.jsx)(s.code,{children:"messages"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,t.jsx)(s.p,{children:"Here is a quick reference to the key messaging methods:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Method"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"postMessage"})}),(0,t.jsx)(s.td,{children:"Send a message to a channel."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"addListener"})}),(0,t.jsx)(s.td,{children:"Add a listener to a channel."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"removeListener"})}),(0,t.jsx)(s.td,{children:"Remove a listener from a channel."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"createStream"})}),(0,t.jsx)(s.td,{children:"Create a stream that listens to a channel."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"revokeAuthentication"})}),(0,t.jsx)(s.td,{children:"Revoke authentication tokens."})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"sending-messages",children:"Sending messages"}),"\n",(0,t.jsxs)(s.p,{children:["To send a message, you can use the ",(0,t.jsx)(s.code,{children:"postMessage"})," method. The message is published to the specified channel and needs to be a Serverpod model."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dart",children:"var message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In the example above, the message published on the ",(0,t.jsx)(s.code,{children:"user_updates"})," channel. Any subscriber to this channel in the server will receive the message."]}),"\n",(0,t.jsx)(s.h3,{id:"global-messages",children:"Global messages"}),"\n",(0,t.jsxs)(s.p,{children:["Serverpod uses Redis to pass messages between servers. To send a message to another server, enable Redis and then set the ",(0,t.jsx)(s.code,{children:"global"})," parameter to ",(0,t.jsx)(s.code,{children:"true"})," when posting a message."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dart",children:"var message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In the example above, the message is published to the ",(0,t.jsx)(s.code,{children:"user_updates"})," channel and will be received by all servers connected to the same Redis instance."]}),"\n",(0,t.jsx)(s.admonition,{type:"warning",children:(0,t.jsx)(s.p,{children:"If Redis is not enabled, sending global messages will throw an exception."})}),"\n",(0,t.jsx)(s.h2,{id:"receiving-messages",children:"Receiving messages"}),"\n",(0,t.jsx)(s.p,{children:"Receiving messages is just as simple as sending them! Serverpod provides two ways to handle incoming messages: by creating a stream that subscribes to a channel or by adding a listener to a channel."}),"\n",(0,t.jsx)(s.h3,{id:"creating-a-stream",children:"Creating a stream"}),"\n",(0,t.jsxs)(s.p,{children:["To create a stream that subscribes to a channel, use the ",(0,t.jsx)(s.code,{children:"createStream"})," method. The stream will emit a value whenever a message is posted to the channel."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dart",children:"var stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In the above example, a stream is created that listens to the ",(0,t.jsx)(s.code,{children:"user_updates"})," channel and processes incoming requests."]}),"\n",(0,t.jsx)(s.h4,{id:"stream-lifecycle",children:"Stream lifecycle"}),"\n",(0,t.jsx)(s.p,{children:"The stream is automatically closed when the session is closed. If you want to close the stream manually, you simply cancel the stream subscription."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dart",children:"var stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n"})}),"\n",(0,t.jsx)(s.p,{children:"In the above example, the stream is first created and then canceled."}),"\n",(0,t.jsx)(s.h3,{id:"adding-a-listener",children:"Adding a listener"}),"\n",(0,t.jsxs)(s.p,{children:["To add a listener to a channel, use the ",(0,t.jsx)(s.code,{children:"addListener"})," method. The listener will be called whenever a message is posted to the channel."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dart",children:"session.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In the above example, the listener will be called whenever a message is posted to the ",(0,t.jsx)(s.code,{children:"user_updates"})," channel. The listener will be called regardless if a message is published globally by another server or internally by the same server."]}),"\n",(0,t.jsx)(s.h4,{id:"listener-lifecycle",children:"Listener lifecycle"}),"\n",(0,t.jsxs)(s.p,{children:["The listener is automatically removed when the session is closed. To manually remove a listener, use the ",(0,t.jsx)(s.code,{children:"removeListener"})," method."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dart",children:"var myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In the above example, the listener is first added and then removed from the ",(0,t.jsx)(s.code,{children:"user_updates"})," channel."]}),"\n",(0,t.jsx)(s.h2,{id:"revoke-authentication",children:"Revoke authentication"}),"\n",(0,t.jsxs)(s.p,{children:["The messaging interface also exposes a method for revoking authentication. For more details on handling revoked authentication, refer to the section on ",(0,t.jsx)(s.a,{href:"authentication/custom-overrides#Handling-revoked-authentication",children:"handling revoked authentication"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>d});var a=n(96540);const t={},r=a.createContext(t);function i(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);