"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[27464],{45051:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"get-started/serializing-data","title":"Serializing data","description":"Serverpod makes it easy to generate serializable classes that can be passed between server and client or used to communicate with the database.","source":"@site/versioned_docs/version-2.6.0/01-get-started/07-serializing-data.md","sourceDirName":"01-get-started","slug":"/get-started/serializing-data","permalink":"/get-started/serializing-data","draft":false,"unlisted":false,"editUrl":"https://github.com/serverpod/serverpod_docs/tree/main/versioned_docs/version-2.6.0/01-get-started/07-serializing-data.md","tags":[],"version":"2.6.0","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Working with endpoints","permalink":"/get-started/working-with-endpoints"},"next":{"title":"Working with the database","permalink":"/get-started/working-with-database"}}');var a=s(74848),r=s(28453);const i={},o="Serializing data",d={},c=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"serializing-data",children:"Serializing data"})}),"\n",(0,a.jsx)(t.p,{children:"Serverpod makes it easy to generate serializable classes that can be passed between server and client or used to communicate with the database."}),"\n",(0,a.jsxs)(t.p,{children:["The structure for your serialized classes is defined in ",(0,a.jsx)(t.code,{children:".spy.yaml"})," files anywhere in the ",(0,a.jsx)(t.code,{children:"lib"})," directory. Run ",(0,a.jsx)(t.code,{children:"serverpod generate"})," in the home directory of the server to build the Dart code for the classes and make them accessible to both the server and client."]}),"\n",(0,a.jsxs)(t.p,{children:["Here is a simple example of a ",(0,a.jsx)(t.code,{children:".spy.yaml"})," file defining a serializable class:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"class: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Supported types are ",(0,a.jsx)(t.code,{children:"bool"}),", ",(0,a.jsx)(t.code,{children:"int"}),", ",(0,a.jsx)(t.code,{children:"double"}),", ",(0,a.jsx)(t.code,{children:"String"}),", ",(0,a.jsx)(t.code,{children:"DateTime"}),", ",(0,a.jsx)(t.code,{children:"ByteData"}),", and other serializable classes. You can also use ",(0,a.jsx)(t.code,{children:"List"}),"s and ",(0,a.jsx)(t.code,{children:"Map"}),"s of the supported types, just make sure to specify the types. Null safety is supported. The keys of ",(0,a.jsx)(t.code,{children:"Map"})," must be non-nullable ",(0,a.jsx)(t.code,{children:"String"}),"s. Once your classes are generated, you can use them as parameters or return types to endpoint methods."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["You can also create custom serialized classes with tools such as Freezed. Learn more in the ",(0,a.jsx)(t.a,{href:"../concepts/serialization",children:"Serialization"})," section."]})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(96540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);