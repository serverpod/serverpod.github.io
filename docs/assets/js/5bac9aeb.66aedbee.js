"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[2037],{94794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"concepts/database/relations/referential-actions","title":"Referential actions","description":"In Serverpod, the behavior of update and delete for relations can be precisely defined using the onUpdate and onDelete properties. These properties map directly to the corresponding referential actions in PostgreSQL.","source":"@site/versioned_docs/version-2.6.0/06-concepts/06-database/03-relations/05-referential-actions.md","sourceDirName":"06-concepts/06-database/03-relations","slug":"/concepts/database/relations/referential-actions","permalink":"/2.6.0/concepts/database/relations/referential-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/serverpod/serverpod_docs/tree/main/versioned_docs/version-2.6.0/06-concepts/06-database/03-relations/05-referential-actions.md","tags":[],"version":"2.6.0","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Self-relations","permalink":"/2.6.0/concepts/database/relations/self-relations"},"next":{"title":"Relations with modules","permalink":"/2.6.0/concepts/database/relations/modules"}}');var i=t(74848),r=t(28453);const s={},l="Referential actions",o={},d=[{value:"Available referential actions",id:"available-referential-actions",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Default values",id:"default-values",level:2},{value:"Full example",id:"full-example",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"referential-actions",children:"Referential actions"})}),"\n",(0,i.jsx)(n.p,{children:"In Serverpod, the behavior of update and delete for relations can be precisely defined using the onUpdate and onDelete properties. These properties map directly to the corresponding referential actions in PostgreSQL."}),"\n",(0,i.jsx)(n.h2,{id:"available-referential-actions",children:"Available referential actions"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Action"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"NoAction"})}),(0,i.jsx)(n.td,{children:"If any constraint violation occurs, no action will be taken, and an error will be raised."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Restrict"})}),(0,i.jsx)(n.td,{children:"If any referencing rows still exist when the constraint is checked, an error is raised."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"SetDefault"})}),(0,i.jsx)(n.td,{children:"The field will revert to its default value. Note: This action necessitates that a default value is configured for the field."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cascade"})}),(0,i.jsx)(n.td,{children:"Any action taken on the parent (update/delete) will be mirrored in the child."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"SetNull"})}),(0,i.jsx)(n.td,{children:"The field value is set to null. This action is permissible only if the field has been marked as optional."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:"Use the following syntax to apply referential actions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"relation(onUpdate=<ACTION>, onDelete=<ACTION>)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"default-values",children:"Default values"}),"\n",(0,i.jsx)(n.p,{children:"If no referential actions are specified, the default behavior will be applied."}),"\n",(0,i.jsxs)(n.p,{children:["If the relation is defined as an ",(0,i.jsx)(n.a,{href:"one-to-one#with-an-object",children:"object relation"}),", the default behavior is ",(0,i.jsx)(n.code,{children:"NoAction"})," for both onUpdate and onDelete."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"parent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If the relation is defined as an ",(0,i.jsx)(n.a,{href:"one-to-one#with-an-id-field",children:"id relation"}),", the default behavior is ",(0,i.jsx)(n.code,{children:"NoAction"})," for onUpdate and ",(0,i.jsx)(n.code,{children:"Cascade"})," for onDelete."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"parentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"The sequence of onUpdate and onDelete is interchangeable."})}),"\n",(0,i.jsx)(n.h3,{id:"full-example",children:"Full example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"class: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the given example, if the ",(0,i.jsx)(n.code,{children:"example"})," parent is updated, the ",(0,i.jsx)(n.code,{children:"parentId"})," will be set to null. If the parent is deleted, no action will be taken for parentId."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);