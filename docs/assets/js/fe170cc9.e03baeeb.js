"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[72231],{97632:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"concepts/database/indexing","title":"Indexing","description":"For performance reasons, you may want to add indexes to your database tables. These are added in the YAML-files defining the serializable objects.","source":"@site/docs/06-concepts/06-database/04-indexing.md","sourceDirName":"06-concepts/06-database","slug":"/concepts/database/indexing","permalink":"/next/concepts/database/indexing","draft":false,"unlisted":false,"editUrl":"https://github.com/serverpod/serverpod_docs/tree/main/docs/06-concepts/06-database/04-indexing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Relations with modules","permalink":"/next/concepts/database/relations/modules"},"next":{"title":"CRUD","permalink":"/next/concepts/database/crud"}}');var s=i(74848),t=i(28453);const a={},c="Indexing",r={},o=[{value:"Add an index",id:"add-an-index",level:3},{value:"Making fields unique",id:"making-fields-unique",level:3},{value:"Specifying index type",id:"specifying-index-type",level:3},{value:"Vector indexes",id:"vector-indexes",level:3},{value:"HNSW indexes",id:"hnsw-indexes",level:4},{value:"IVFFLAT indexes",id:"ivfflat-indexes",level:4},{value:"Distance functions",id:"distance-functions",level:4}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"indexing",children:"Indexing"})}),"\n",(0,s.jsx)(n.p,{children:"For performance reasons, you may want to add indexes to your database tables. These are added in the YAML-files defining the serializable objects."}),"\n",(0,s.jsx)(n.h3,{id:"add-an-index",children:"Add an index"}),"\n",(0,s.jsxs)(n.p,{children:["To add an index, add an ",(0,s.jsx)(n.code,{children:"indexes"})," section to the YAML-file. The ",(0,s.jsx)(n.code,{children:"indexes"})," section is a map where the key is the name of the index and the value is a map with the index details."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"class: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"fields"})," keyword holds a comma-separated list of column names. These are the fields upon which the index is created. Note that the index can contain several fields."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"class: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n"})}),"\n",(0,s.jsx)(n.h3,{id:"making-fields-unique",children:"Making fields unique"}),"\n",(0,s.jsx)(n.p,{children:"Adding a unique index ensures that the value or combination of values stored in the fields are unique for the table. This can be useful for example if you want to make sure that no two companies have the same name."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"class: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"unique"})," keyword is a bool that can toggle the index to be unique, the default is set to false. If the ",(0,s.jsx)(n.code,{children:"unique"})," keyword is applied to a multi-column index, the index will be unique for the combination of the fields."]}),"\n",(0,s.jsx)(n.h3,{id:"specifying-index-type",children:"Specifying index type"}),"\n",(0,s.jsx)(n.p,{children:"It is possible to add a type key to specify the index type."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"class: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If no type is specified the default is ",(0,s.jsx)(n.code,{children:"btree"}),". All ",(0,s.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/indexes-types.html",children:"PostgreSQL index types"})," are supported, ",(0,s.jsx)(n.code,{children:"btree"}),", ",(0,s.jsx)(n.code,{children:"hash"}),", ",(0,s.jsx)(n.code,{children:"gist"}),", ",(0,s.jsx)(n.code,{children:"spgist"}),", ",(0,s.jsx)(n.code,{children:"gin"}),", ",(0,s.jsx)(n.code,{children:"brin"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"vector-indexes",children:"Vector indexes"}),"\n",(0,s.jsxs)(n.p,{children:["To enhance the performance of vector similarity search, it is possible to create specialized vector indexes on ",(0,s.jsx)(n.code,{children:"Vector"})," fields. Serverpod supports both ",(0,s.jsx)(n.code,{children:"HNSW"})," and ",(0,s.jsx)(n.code,{children:"IVFFLAT"})," index types with full parameter specification."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Each vector index can only be created on a single ",(0,s.jsx)(n.code,{children:"Vector"})," field. It is not possible to create a vector index on multiple fields of any kind."]})}),"\n",(0,s.jsx)(n.h4,{id:"hnsw-indexes",children:"HNSW indexes"}),"\n",(0,s.jsx)(n.p,{children:"Hierarchical Navigable Small World (HNSW) indexes provide fast approximate nearest neighbor search:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"class: Document\ntable: document\nfields:\n  content: String\n  embedding: Vector(1536)\nindexes:\n  document_embedding_hnsw_idx:\n    fields: embedding\n    type: hnsw\n    distanceFunction: cosine\n    parameters:\n      m: 16\n      ef_construction: 64\n"})}),"\n",(0,s.jsx)(n.p,{children:"Available HNSW parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"m"}),": Maximum number of bi-directional links for each node (default: 16)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"efConstruction"}),": Size of the dynamic candidate list (default: 64)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"ivfflat-indexes",children:"IVFFLAT indexes"}),"\n",(0,s.jsx)(n.p,{children:"Inverted File with Flat compression (IVFFLAT) indexes are suitable for large datasets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"class: Document\ntable: document\nfields:\n  content: String\n  embedding: Vector(1536)\nindexes:\n  document_embedding_ivfflat_idx:\n    fields: embedding\n    type: ivfflat\n    distanceFunction: innerProduct\n    parameters:\n      lists: 100\n"})}),"\n",(0,s.jsx)(n.p,{children:"Available IVFFLAT parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lists"}),": Number of inverted lists (default: 100)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"distance-functions",children:"Distance functions"}),"\n",(0,s.jsxs)(n.p,{children:["Supported distance functions for vector indexes (",(0,s.jsx)(n.code,{children:"distanceFunction"})," parameter):"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Distance Function"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Use Case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"l2"})}),(0,s.jsx)(n.td,{children:"Euclidean distance"}),(0,s.jsx)(n.td,{children:"Default for most embeddings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"innerProduct"})}),(0,s.jsx)(n.td,{children:"Inner product"}),(0,s.jsx)(n.td,{children:"When vectors are normalized"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cosine"})}),(0,s.jsx)(n.td,{children:"Cosine distance"}),(0,s.jsx)(n.td,{children:"Text embeddings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"l1"})}),(0,s.jsx)(n.td,{children:"Manhattan or taxicab distance"}),(0,s.jsx)(n.td,{children:"Sparse/high-dimensional data"})]})]})]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"If more than one distance function is going to be frequently used on the same vector field, consider creating one index for each distance function to ensure optimal performance."})}),"\n",(0,s.jsxs)(n.p,{children:["For more details on vector indexes and its configuration, refer to the ",(0,s.jsx)(n.a,{href:"https://github.com/pgvector/pgvector/tree/master?tab=readme-ov-file#indexing",children:"pgvector extension documentation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var d=i(96540);const s={},t=d.createContext(s);function a(e){const n=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);