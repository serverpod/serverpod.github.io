"use strict";(self.webpackChunkserverpod_docs=self.webpackChunkserverpod_docs||[]).push([[34422],{58338:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"get-started/models-and-data","title":"Models and data","description":"Serverpod ships with a powerful data modeling system that uses easy-to-read definition files in YAML. It generates Dart classes with all the necessary code to serialize and deserialize the data and connect to the database. This allows you to define your data models for the server and the app in one place, eliminating any inconsistencies. The models give you fine-grained control over the visibility of properties and how they interact with each other.","source":"@site/versioned_docs/version-2.8.0/01-get-started/02-models-and-data.md","sourceDirName":"01-get-started","slug":"/get-started/models-and-data","permalink":"/2.8.0/get-started/models-and-data","draft":false,"unlisted":false,"editUrl":"https://github.com/serverpod/serverpod_docs/tree/main/versioned_docs/version-2.8.0/01-get-started/02-models-and-data.md","tags":[],"version":"2.8.0","sidebarPosition":2,"frontMatter":{"sidebar_label":"2. Models and data"},"sidebar":"tutorialSidebar","previous":{"title":"1. Creating endpoint methods","permalink":"/2.8.0/get-started/creating-endpoints"},"next":{"title":"3. Working with the database","permalink":"/2.8.0/get-started/working-with-the-database"}}');var r=t(74848),s=t(28453);const a={sidebar_label:"2. Models and data"},o="Models and data",d={},l=[{value:"Create a new model",id:"create-a-new-model",level:2},{value:"Generate the code",id:"generate-the-code",level:2},{value:"Use the model in the server",id:"use-the-model-in-the-server",level:2},{value:"Use the model in the app",id:"use-the-model-in-the-app",level:2},{value:"Run the app",id:"run-the-app",level:2},{value:"Next steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"models-and-data",children:"Models and data"})}),"\n",(0,r.jsx)(n.p,{children:"Serverpod ships with a powerful data modeling system that uses easy-to-read definition files in YAML. It generates Dart classes with all the necessary code to serialize and deserialize the data and connect to the database. This allows you to define your data models for the server and the app in one place, eliminating any inconsistencies. The models give you fine-grained control over the visibility of properties and how they interact with each other."}),"\n",(0,r.jsx)(n.h2,{id:"create-a-new-model",children:"Create a new model"}),"\n",(0,r.jsxs)(n.p,{children:["Models files can be placed anywhere in the server's ",(0,r.jsx)(n.code,{children:"lib"})," directory. We will create a new model file called ",(0,r.jsx)(n.code,{children:"recipe.spy.yaml"})," in the ",(0,r.jsx)(n.code,{children:"magic_recipe_server/lib/src/recipes/"})," directory. We like to use the extension ",(0,r.jsx)(n.code,{children:".spy.yaml"})," to indicate that this is a ",(0,r.jsx)(n.em,{children:"serverpod YAML"})," file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"### Our AI generated Recipe\nclass: Recipe\nfields:\n  ### The author of the recipe\n  author: String\n  ### The recipe text\n  text: String\n  ### The date the recipe was created\n  date: DateTime\n  ### The ingredients the user has passed in\n  ingredients: String\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can use most primitive Dart types here or any other models you have specified in other YAML files. You can also use typed ",(0,r.jsx)(n.code,{children:"List"}),", ",(0,r.jsx)(n.code,{children:"Map"}),", or ",(0,r.jsx)(n.code,{children:"Set"}),". For detailed information, see ",(0,r.jsx)(n.a,{href:"/2.8.0/concepts/models",children:"Working with models"})]}),"\n",(0,r.jsx)(n.h2,{id:"generate-the-code",children:"Generate the code"}),"\n",(0,r.jsxs)(n.p,{children:["To generate the code for the model, run the ",(0,r.jsx)(n.code,{children:"serverpod generate"})," command in your server directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cd magic_recipe/magic_recipe_server\n$ serverpod generate\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will generate the code for the model and create a new file called ",(0,r.jsx)(n.code,{children:"recipe.dart"})," in the ",(0,r.jsx)(n.code,{children:"lib/src/generated"})," directory. It will also update the client code in ",(0,r.jsx)(n.code,{children:"magic_recipe/magic_recipe_client"})," so you can use it in your Flutter app."]}),"\n",(0,r.jsx)(n.h2,{id:"use-the-model-in-the-server",children:"Use the model in the server"}),"\n",(0,r.jsxs)(n.p,{children:["Now that you have created the model, you can use it in your server code. Let's update the ",(0,r.jsx)(n.code,{children:"lib/src/recipies/recipe_endpoint.dart"})," file to make the ",(0,r.jsx)(n.code,{children:"generateRecipe"})," method to return a ",(0,r.jsx)(n.code,{children:"Recipe"})," object instead of a string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// ...\nimport 'package:magic_recipe_server/src/generated/protocol.dart';\n// ...\nclass RecipeEndpoint extends Endpoint {\n  /// Pass in a string containing the ingredients and get a recipe back.\n  Future<Recipe> generateRecipe(Session session, String ingredients) async {\n// ...\n    final recipe = Recipe(\n      author: 'Gemini',\n      text: responseText,\n      date: DateTime.now(),\n      ingredients: ingredients,\n    );\n\n    return recipe;\n  }\n}\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Click to see the full code"}),(0,r.jsx)("p",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'dart:async';\n\nimport 'package:google_generative_ai/google_generative_ai.dart';\nimport 'package:magic_recipe_server/src/generated/protocol.dart';\nimport 'package:serverpod/serverpod.dart';\n\n/// This is the endpoint that will be used to generate a recipe using the\n/// Google Gemini API. It extends the Endpoint class and implements the\n/// generateRecipe method.\nclass RecipeEndpoint extends Endpoint {\n  /// Pass in a string containing the ingredients and get a recipe back.\n  Future<Recipe> generateRecipe(Session session, String ingredients) async {\n    // Serverpod automatically loads your passwords.yaml file and makes the passwords available\n    // in the session.passwords map.\n    final geminiApiKey = session.passwords['gemini'];\n    if (geminiApiKey == null) {\n      throw Exception('Gemini API key not found');\n    }\n    final gemini = GenerativeModel(\n      model: 'gemini-2.0-flash',\n      apiKey: geminiApiKey,\n    );\n\n    // A prompt to generate a recipe, the user will provide a free text input with the ingredients\n    final prompt =\n        'Generate a recipe using the following ingredients: $ingredients, always put the title '\n        'of the recipe in the first line, and then the instructions. The recipe should be easy '\n        'to follow and include all necessary steps. Please provide a detailed recipe.';\n\n    final response = await gemini.generateContent([Content.text(prompt)]);\n\n    final responseText = response.text;\n\n    // Check if the response is empty or null\n    if (responseText == null || responseText.isEmpty) {\n      throw Exception('No response from Gemini API');\n    }\n\n    final recipe = Recipe(\n      author: 'Gemini',\n      text: responseText,\n      date: DateTime.now(),\n      ingredients: ingredients,\n    );\n\n    return recipe;\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"use-the-model-in-the-app",children:"Use the model in the app"}),"\n",(0,r.jsxs)(n.p,{children:["First, we need to update our generated client by running ",(0,r.jsx)(n.code,{children:"serverpod generate"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cd magic_recipe/magic_recipe_server\n$ serverpod generate\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have created the ",(0,r.jsx)(n.code,{children:"Recipe"})," model we can use it in the client. We will do this in the ",(0,r.jsx)(n.code,{children:"magic_recipe/magic_recipe_flutter/lib/main.dart"})," file. Let's update our ",(0,r.jsx)(n.code,{children:"RecipeWidget"})," so that it displays the author and year of the recipe in addition to the recipe itself."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class MyHomePageState extends State<MyHomePage> {\n  // Rename _resultMessage to _recipe and change the type to Recipe.\n\n  /// Holds the last result or null if no result exists yet.\n  Recipe? _recipe;\n// ...\n  void _callGenerateRecipe() async {\n    try {\n      setState(() {\n        _errorMessage = null;\n        _recipe = null;\n        _loading = true;\n      });\n      final result =\n          await client.recipe.generateRecipe(_textEditingController.text);\n      setState(() {\n        _errorMessage = null;\n        _recipe = result;\n        _loading = false;\n      });\n    } catch (e) {\n      setState(() {\n        _errorMessage = '$e';\n        _recipe = null;\n        _loading = false;\n      });\n    }\n  }\n// ...\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n// ...\n                    // Change the ResultDisplay to use the Recipe object\n                    ResultDisplay(\n                  resultMessage: _recipe != null\n                      ? '${_recipe?.author} on ${_recipe?.date}:\\n${_recipe?.text}'\n                      : null,\n                  errorMessage: _errorMessage,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Click to see the full code"}),(0,r.jsx)("p",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class MyHomePageState extends State<MyHomePage> {\n  // Rename _resultMessage to _recipe and change the type to Recipe.\n\n  /// Holds the last result or null if no result exists yet.\n  Recipe? _recipe;\n\n  /// Holds the last error message that we've received from the server or null if no\n  /// error exists yet.\n  String? _errorMessage;\n\n  final _textEditingController = TextEditingController();\n\n  bool _loading = false;\n\n  void _callGenerateRecipe() async {\n    try {\n      setState(() {\n        _errorMessage = null;\n        _recipe = null;\n        _loading = true;\n      });\n      final result =\n          await client.recipe.generateRecipe(_textEditingController.text);\n      setState(() {\n        _errorMessage = null;\n        _recipe = result;\n        _loading = false;\n      });\n    } catch (e) {\n      setState(() {\n        _errorMessage = '$e';\n        _recipe = null;\n        _loading = false;\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            Padding(\n              padding: const EdgeInsets.only(bottom: 16.0),\n              child: TextField(\n                controller: _textEditingController,\n                decoration: const InputDecoration(\n                  hintText: 'Enter your ingredients',\n                ),\n              ),\n            ),\n            Padding(\n              padding: const EdgeInsets.only(bottom: 16.0),\n              child: ElevatedButton(\n                onPressed: _loading ? null : _callGenerateRecipe,\n                child: _loading\n                    ? const Text('Loading...')\n                    : const Text('Send to Server'),\n              ),\n            ),\n            Expanded(\n              child: SingleChildScrollView(\n                child:\n                    // Change the ResultDisplay to use the Recipe object\n                    ResultDisplay(\n                  resultMessage: _recipe != null\n                      ? '${_recipe?.author} on ${_recipe?.date}:\\n${_recipe?.text}'\n                      : null,\n                  errorMessage: _errorMessage,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"run-the-app",children:"Run the app"}),"\n",(0,r.jsx)(n.p,{children:"First, start the server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cd magic_recipe/magic_recipe_server\n$ docker compose up -d\n$ dart bin/main.dart\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, start the Flutter app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cd magic_recipe/magic_recipe_flutter\n$ flutter run -d chrome\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will start the Flutter app in your browser. It should look something like this:\n",(0,r.jsx)(n.img,{alt:"Flutter Recipe App",src:t(49789).A+"",width:"2166",height:"1612"})]}),"\n",(0,r.jsx)(n.p,{children:"Click the button to get a new recipe. The app will call the endpoint on the server and display the result in the app."}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsx)(n.p,{children:"On the Flutter side, there are quite a few things that could be improved, like a nicer display of the result, e.g., using a markdown renderer."}),"\n",(0,r.jsx)(n.p,{children:"In the next section, you will learn how to use the database to store your favorite recipes and display them in your app."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},49789:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/flutter-web-ingredients-4e8a89eb52e8e984520e053ea0b7dee5.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);